
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gramatica;

import java_cup.runtime.*;
import objetos.*;
import reportes.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\004\000\002\003\005\000\002\003\004" +
    "\000\002\003\003\000\002\004\007\000\002\004\007\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\005\010\000\002\006\011\000\002\007\011\000\002\010" +
    "\013\000\002\011\015\000\002\012\013\000\002\013\007" +
    "\000\002\014\003\000\002\015\003\000\002\016\003\000" +
    "\002\017\003\000\002\020\003\000\002\021\003\000\002" +
    "\022\003\000\002\023\003\000\002\024\003\000\002\026" +
    "\003\000\002\027\003\000\002\027\003\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\004\000\002\031\004\000\002\031\005\000\002" +
    "\031\003\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\006\003\006\016\007\001\002\000\004\002" +
    "\000\001\002\000\010\002\ufffb\016\007\017\146\001\002" +
    "\000\004\002\uffff\001\002\000\014\014\014\022\012\023" +
    "\013\024\016\025\015\001\002\000\004\002\011\001\002" +
    "\000\004\002\001\001\002\000\004\011\131\001\002\000" +
    "\004\011\116\001\002\000\004\011\100\001\002\000\004" +
    "\011\061\001\002\000\004\011\017\001\002\000\012\005" +
    "\024\006\025\011\023\026\022\001\002\000\016\004\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb\001\002\000" +
    "\004\004\045\001\002\000\016\004\uffda\005\uffda\006\uffda" +
    "\007\uffda\010\uffda\012\uffda\001\002\000\012\005\024\006" +
    "\025\011\023\026\022\001\002\000\012\005\024\006\025" +
    "\011\023\026\022\001\002\000\012\005\024\006\025\011" +
    "\023\026\022\001\002\000\014\004\uffee\005\032\006\033" +
    "\007\031\010\034\001\002\000\004\012\030\001\002\000" +
    "\010\002\ufff8\016\ufff8\017\ufff8\001\002\000\012\005\024" +
    "\006\025\011\023\026\022\001\002\000\012\005\024\006" +
    "\025\011\023\026\022\001\002\000\012\005\024\006\025" +
    "\011\023\026\022\001\002\000\012\005\024\006\025\011" +
    "\023\026\022\001\002\000\016\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\012\uffdf\001\002\000\016\004\uffe1\005" +
    "\uffe1\006\uffe1\007\031\010\034\012\uffe1\001\002\000\016" +
    "\004\uffe2\005\uffe2\006\uffe2\007\031\010\034\012\uffe2\001" +
    "\002\000\016\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0" +
    "\012\uffe0\001\002\000\016\004\uffde\005\uffde\006\uffde\007" +
    "\uffde\010\uffde\012\uffde\001\002\000\016\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\012\uffdd\001\002\000\014\005" +
    "\032\006\033\007\031\010\034\012\044\001\002\000\016" +
    "\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\012\uffdc\001" +
    "\002\000\012\005\024\006\025\011\023\026\022\001\002" +
    "\000\004\004\050\001\002\000\014\004\uffed\005\032\006" +
    "\033\007\031\010\034\001\002\000\012\005\024\006\025" +
    "\011\023\026\022\001\002\000\004\004\053\001\002\000" +
    "\014\004\uffea\005\032\006\033\007\031\010\034\001\002" +
    "\000\012\005\024\006\025\011\023\026\022\001\002\000" +
    "\004\004\056\001\002\000\014\004\uffe9\005\032\006\033" +
    "\007\031\010\034\001\002\000\004\013\060\001\002\000" +
    "\004\012\ufff2\001\002\000\004\012\uffe5\001\002\000\012" +
    "\005\024\006\025\011\023\026\022\001\002\000\004\004" +
    "\065\001\002\000\004\012\064\001\002\000\010\002\ufff7" +
    "\016\ufff7\017\ufff7\001\002\000\012\005\024\006\025\011" +
    "\023\026\022\001\002\000\004\004\067\001\002\000\012" +
    "\005\024\006\025\011\023\026\022\001\002\000\004\004" +
    "\071\001\002\000\012\005\024\006\025\011\023\026\022" +
    "\001\002\000\004\004\073\001\002\000\012\005\024\006" +
    "\025\011\023\026\022\001\002\000\014\004\uffe8\005\032" +
    "\006\033\007\031\010\034\001\002\000\004\004\076\001" +
    "\002\000\004\013\060\001\002\000\004\012\ufff1\001\002" +
    "\000\012\005\024\006\025\011\023\026\022\001\002\000" +
    "\004\004\104\001\002\000\004\012\103\001\002\000\010" +
    "\002\ufff6\016\ufff6\017\ufff6\001\002\000\012\005\024\006" +
    "\025\011\023\026\022\001\002\000\004\004\106\001\002" +
    "\000\012\005\024\006\025\011\023\026\022\001\002\000" +
    "\004\004\111\001\002\000\014\004\uffe7\005\032\006\033" +
    "\007\031\010\034\001\002\000\012\005\024\006\025\011" +
    "\023\026\022\001\002\000\004\004\114\001\002\000\014" +
    "\004\uffe6\005\032\006\033\007\031\010\034\001\002\000" +
    "\004\013\060\001\002\000\004\012\ufff0\001\002\000\012" +
    "\005\024\006\025\011\023\026\022\001\002\000\004\004" +
    "\122\001\002\000\004\012\121\001\002\000\010\002\ufff9" +
    "\016\ufff9\017\ufff9\001\002\000\012\005\024\006\025\011" +
    "\023\026\022\001\002\000\004\004\124\001\002\000\012" +
    "\005\024\006\025\011\023\026\022\001\002\000\014\004" +
    "\uffeb\005\032\006\033\007\031\010\034\001\002\000\004" +
    "\004\127\001\002\000\004\013\060\001\002\000\004\012" +
    "\ufff3\001\002\000\012\005\024\006\025\011\023\026\022" +
    "\001\002\000\004\004\135\001\002\000\004\012\134\001" +
    "\002\000\010\002\ufffa\016\ufffa\017\ufffa\001\002\000\012" +
    "\005\024\006\025\011\023\026\022\001\002\000\004\004" +
    "\137\001\002\000\012\005\024\006\025\011\023\026\022" +
    "\001\002\000\004\004\142\001\002\000\014\004\uffec\005" +
    "\032\006\033\007\031\010\034\001\002\000\004\013\060" +
    "\001\002\000\004\012\ufff4\001\002\000\004\002\ufffe\001" +
    "\002\000\006\002\ufffc\016\007\001\002\000\004\020\147" +
    "\001\002\000\004\021\150\001\002\000\004\011\151\001" +
    "\002\000\012\005\024\006\025\011\023\026\022\001\002" +
    "\000\004\004\155\001\002\000\004\012\154\001\002\000" +
    "\006\002\ufff5\016\ufff5\001\002\000\012\005\024\006\025" +
    "\011\023\026\022\001\002\000\004\004\157\001\002\000" +
    "\006\014\162\015\161\001\002\000\004\012\uffef\001\002" +
    "\000\004\012\uffe3\001\002\000\004\012\uffe4\001\002\000" +
    "\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\010\002\007\003\003\004\004\001\001\000" +
    "\002\001\001\000\010\003\143\004\004\005\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\026\014\020\030\017\031\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\017\031" +
    "\042\001\001\000\006\030\017\031\041\001\001\000\006" +
    "\030\017\031\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\017\031\037\001\001" +
    "\000\006\030\017\031\036\001\001\000\006\030\017\031" +
    "\035\001\001\000\006\030\017\031\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\045\030\017\031\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\050" +
    "\030\017\031\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\021\053\030\017\031\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\062\014\061" +
    "\030\017\031\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\065\030\017\031\046" +
    "\001\001\000\002\001\001\000\010\020\067\030\017\031" +
    "\051\001\001\000\002\001\001\000\010\021\071\030\017" +
    "\031\054\001\001\000\002\001\001\000\010\022\074\030" +
    "\017\031\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\076\001\001\000\002\001\001\000\012\012" +
    "\101\014\100\030\017\031\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\104\030" +
    "\017\031\046\001\001\000\002\001\001\000\010\023\106" +
    "\030\017\031\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\111\030\017\031\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\114\001\001\000" +
    "\002\001\001\000\012\007\117\014\116\030\017\031\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\122\030\017\031\046\001\001\000\002" +
    "\001\001\000\010\017\125\030\017\031\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\127\001\001" +
    "\000\002\001\001\000\012\006\132\014\131\030\017\031" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\135\030\017\031\046\001\001\000" +
    "\002\001\001\000\010\016\137\030\017\031\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\162" +
    "\004\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\152\023\151\030\017\031\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\155\030\017\031\112\001\001\000\002" +
    "\001\001\000\004\027\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /*---------------------------------------CODIGO EJECUTABLE--------------------------------------------*/
    
   
    public parser(AnalizadorLexico lex){
        super(lex);
      
        
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }

    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");   
    }
    
    public ArrayList <Circulo> circulos = new ArrayList<>();
    public ArrayList <Cuadrado> cuadrados = new ArrayList<>();
    public ArrayList <Rectangulo> rectangulos = new ArrayList<>();
    public ArrayList <Poligono> poligonos = new ArrayList<>();
    public ArrayList <Linea> lineas = new ArrayList<>();
    public ArrayList <Animacion> animaciones = new ArrayList<>();
    
        /******************* REPORTE DE COLORES **********************/ 
        int azul = 0;
        int rojo =0;
        int verde = 0;
        int amarillo =0;
        int naranja =0;
        int morado = 0;
        int cafe =0;
        int negro =0;
        public ReporteColores reporteCantColores = new ReporteColores(azul, rojo, verde, amarillo, naranja, morado, cafe, negro);
       /******************* REPORTE DE FORMAS **********************/ 
       int cantCirculos =0;
       int cantCuadrados = 0;
       int cantRectangulos =0;
       int cantLineas =0;
       int cantPoligonos=0;
       public ReporteFormas reporteCantFormas = new ReporteFormas(cantCirculos, cantCuadrados, cantRectangulos, cantLineas, cantPoligonos);
         /******************* REPORTE DE ANIMACIONES **********************/ 
       
                int cantAnimLinea =0;
                int cantAnimCurva =0;
                public ReporteAnimaciones reporteCantAnimaciones = new ReporteAnimaciones(cantAnimLinea, cantAnimCurva);
      



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= A 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error 
            {
              Object RESULT =null;
		 System.out.println("Error tipo: SINTACTICO, Posible error debido a una mal definicion en un metodo.\n");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // A ::= ACCION A 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A ::= ACCION ANIMAR A 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // A ::= ACCION ANIMAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // A ::= ACCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ACCION ::= graficar circulo parentesis_a PARAM_CIRCULO parentesis_b 
            {
              Object RESULT =null;
		int circuloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int circuloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Circulo circulo = (Circulo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             cantCirculos++;
            reporteCantFormas.setCirculos(cantCirculos);
            circulos.add(circulo);
            RESULT = circulo;    
            System.out.printf("graficar circulo\n");     
            System.out.printf(" Posicion X: %d, Posicion Y: %d Radio: %d, Color: %s\n\n",circulo.getPos_x(), circulo.getPos_y(), circulo.getRadio(), circulo.getColor());
           
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ACCION ::= graficar cuadrado parentesis_a PARAM_CUADRADO parentesis_b 
            {
              Object RESULT =null;
		int cuadradoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuadradoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuadrado cuadrado = (Cuadrado)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
            cantCuadrados++;
            reporteCantFormas.setCuadrados(cantCuadrados);
            cuadrados.add(cuadrado);
            RESULT = cuadrado;    
               System.out.printf("graficar cuadrado\n");
            System.out.printf(" Pos X: %d, Pos Y: %d Lado: %d, Color: %s\n\n",cuadrado.getPos_x(), cuadrado.getPos_y(), cuadrado.getLado(), cuadrado.getColor());
                 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ACCION ::= graficar rectangulo parentesis_a PARAM_RECTANGULO parentesis_b 
            {
              Object RESULT =null;
		int rectanguloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rectanguloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Rectangulo rectangulo = (Rectangulo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            cantRectangulos++;
            reporteCantFormas.setRectangulos(cantRectangulos);
            rectangulos.add(rectangulo);
            RESULT = rectangulo;    
               System.out.printf("graficar rectangulo\n");  
               System.out.printf("Pos x: %d, Pos y: %d, Alto: %d, Ancho: %d, Color: %s\n\n", rectangulo.getPos_x(), rectangulo.getPos_y(), rectangulo.getAlto(),rectangulo.getAncho(), rectangulo.getColor()); 
                
               
          
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ACCION ::= graficar poligono parentesis_a PARAM_POLIGONO parentesis_b 
            {
              Object RESULT =null;
		int poligonoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int poligonoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Poligono poligono = (Poligono)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            cantPoligonos++;
            reporteCantFormas.setPoligonos(cantPoligonos);
            poligonos.add(poligono);
            RESULT = poligono;    
               System.out.printf("graficar poligono\n");   
            System.out.printf("Pos x: %d, Pos y: %d, Alto: %d, Ancho: %d, Cant Lados: %d, Color: %s\n\n", poligono.getPos_x(), poligono.getPos_y(), poligono.getAlto(),poligono.getAncho(), poligono.getLados(), poligono.getColor()); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ACCION ::= graficar linea parentesis_a PARAM_LINEA parentesis_b 
            {
              Object RESULT =null;
		int linealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int linearight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Linea linea = (Linea)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            cantLineas++;
            reporteCantFormas.setLineas(cantLineas);
            lineas.add(linea);
            RESULT = linea;    
            System.out.printf("graficar linea\n");
            System.out.printf("Pos x: %d, Pos y: %d, DestinoX: %d, DestinoY: %d, Color: %s\n\n", linea.getPos_x(), linea.getPos_y(), linea.getPos_dx(), linea.getPos_dy(), linea.getColor());      
       
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ANIMAR ::= animar objeto anterior parentesis_a PARAM_ANIMACION parentesis_b 
            {
              Object RESULT =null;
		int animacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int animacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Animacion animacion = (Animacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        animaciones.add(animacion);
        RESULT = animacion;
        
          System.out.printf("animar objeto anterior\n");
        System.out.printf("DestinoX: %d, DestinoY: %d, Tipo Animacion: %s\n\n", animacion.getDestinoX(),animacion.getDestinoY(), animacion.getTipoAnimacion());      
      
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ANIMAR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARAM_CIRCULO ::= POS_X coma POS_Y coma RADIO coma COLOR 
            {
              Circulo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int clrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String clr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
        RESULT = new Circulo(x,y,r,clr);
      
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAM_CIRCULO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAM_CUADRADO ::= POS_X coma POS_Y coma LADO coma COLOR 
            {
              Cuadrado RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int clrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String clr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Cuadrado(x,y,l,clr);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAM_CUADRADO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAM_RECTANGULO ::= POS_X coma POS_Y coma ALTO coma ANCHO coma COLOR 
            {
              Rectangulo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int clrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String clr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Rectangulo(x,y,h,b,clr);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAM_RECTANGULO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAM_POLIGONO ::= POS_X coma POS_Y coma ALTO coma ANCHO coma LADOS coma COLOR 
            {
              Poligono RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int clrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String clr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                RESULT = new Poligono(x,y,h,b,l,clr);
        
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAM_POLIGONO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PARAM_LINEA ::= POS_X coma POS_Y coma POS_DX coma POS_DY coma COLOR 
            {
              Linea RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer dx = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer dy = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int clrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String clr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                RESULT = new Linea(x,y,dx,dy,clr);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAM_LINEA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAM_ANIMACION ::= POS_DX coma POS_DY coma TIPO_ANIMACION 
            {
              Animacion RESULT =null;
		int dxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer dx = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer dy = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoAnimaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipoAnimaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tipoAnima = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                RESULT = new Animacion(dx,dy,tipoAnima);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAM_ANIMACION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // POS_X ::= OPERACION 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a;
        System.out.printf("Operaciones POS_X: %d\n", (Integer)a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POS_X",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // POS_Y ::= OPERACION 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a;
        System.out.printf("Operaciones POS_Y: %d\n", (Integer)a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POS_Y",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // RADIO ::= OPERACION 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
        System.out.printf("Operaciones RADIO: %d\n", (Integer)a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RADIO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LADO ::= OPERACION 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
        System.out.printf("Operaciones LADO: %d\n", (Integer)a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LADO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ALTO ::= OPERACION 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
        System.out.printf("Operaciones ALTO: %d\n", (Integer)a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALTO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ANCHO ::= OPERACION 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
        System.out.printf("Operaciones ANCHO: %d\n", (Integer)a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ANCHO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LADOS ::= OPERACION 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
        System.out.printf("Operaciones Cant LADOS: %d\n", (Integer)a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LADOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // POS_DX ::= OPERACION 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a;
        System.out.printf("Operaciones POS_DX: %d\n", (Integer)a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POS_DX",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // POS_DY ::= OPERACION 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a;
        System.out.printf("Operaciones POS_DY: %d\n", (Integer)a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POS_DY",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // COLOR ::= color 
            {
              String RESULT =null;
		int clrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object clr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if (clr.equals("azul")) {
            azul++;
            reporteCantColores.setAzul(azul);
        } else if (clr.equals("rojo")) {
            rojo++;
            reporteCantColores.setRojo(rojo);
        } else if (clr.equals("verde")) {
            verde++;
            reporteCantColores.setVerde(verde);
        } else if (clr.equals("amarillo")) {
            amarillo++;
            reporteCantColores.setAmarillo(amarillo);
        } else if (clr.equals("naranja")) {
            naranja++;
            reporteCantColores.setNaranja(naranja);
        } else if (clr.equals("morado")) {
            morado++;
            reporteCantColores.setMorado(morado);
        } else if (clr.equals("cafe")) {
            cafe++;
            reporteCantColores.setCafe(cafe);          
        } else if (clr.equals("negro")) {
            negro++;
            reporteCantColores.setNegro(negro);
        }
        RESULT = (String)clr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COLOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPO_ANIMACION ::= linea 
            {
              String RESULT =null;
		int tipoAnimaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipoAnimaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipoAnima = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            cantAnimLinea++;
            reporteCantAnimaciones.setCantAnimacionesLinea(cantAnimLinea);
            RESULT = (String)tipoAnima; 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_ANIMACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPO_ANIMACION ::= curva 
            {
              String RESULT =null;
		int tipoAnimaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipoAnimaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipoAnima = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 cantAnimCurva++;
          reporteCantAnimaciones.setCantAnimacionesCurva(cantAnimCurva);
          RESULT = (String)tipoAnima; 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_ANIMACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACION ::= OPERACION mas OPERACION 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a + b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACION ::= OPERACION menos OPERACION 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a - b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACION ::= OPERACION por OPERACION 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a * b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION ::= OPERACION div OPERACION 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a / b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION ::= menos OPERACION 
            {
              Integer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = -b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION ::= mas OPERACION 
            {
              Integer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION ::= parentesis_a OPERACION parentesis_b 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACION ::= NUM 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NUM ::= numero 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = (Integer)a;
        //System.out.printf("Numero: %d\n", (Integer)a); 
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NUM",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
